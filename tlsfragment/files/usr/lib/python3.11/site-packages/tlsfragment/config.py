"""
Configuration management for TLS Fragment
"""

import json
import logging
from pathlib import Path

logger = logging.getLogger(__name__)

class Config:
    def __init__(self, config_data):
        self.data = config_data
        self.port = config_data.get('port', 8080)
        self.loglevel = config_data.get('loglevel', 'INFO')
        self.mode = config_data.get('mode', 'TLSfrag')
        self.domains = config_data.get('domains', {})
        self.pac_domains = config_data.get('pac_domains', [])
        
        # TLS Fragment settings
        self.num_tcp_pieces = config_data.get('num_tcp_pieces', 8)
        self.num_tls_pieces = config_data.get('num_tls_pieces', 8)
        self.len_tcp_sni = config_data.get('len_tcp_sni', 4)
        self.len_tls_sni = config_data.get('len_tls_sni', 4)
        self.send_interval = config_data.get('send_interval', 0.01)
        
        # Fake packet settings
        self.fake_packet = config_data.get('fake_packet', 'GET / HTTP/1.1\r\nHost: www.baidu.com\r\n\r\n')
        self.fake_ttl = config_data.get('fake_ttl', 'query')
        self.fake_sleep = config_data.get('fake_sleep', 0.2)
        
        # Network settings
        self.socket_timeout = config_data.get('my_socket_timeout', 120)
        self.doh_server = config_data.get('doh_server', 'https://cloudflare-dns.com/dns-query?dns=')
        
        # Cache settings
        self.dns_cache = config_data.get('DNS_cache', True)
        self.dns_cache_ttl = config_data.get('DNS_cache_TTL', 259200)
        self.ttl_cache = config_data.get('TTL_cache', True)
        
        # Feature flags
        self.safety_check = config_data.get('safety_check', False)
        self.udp_fake_dns = config_data.get('UDPfakeDNS', True)
        self.by_sni_first = config_data.get('BySNIfirst', False)
        
        # IP redirect rules
        self.ip_redirect = config_data.get('IPredirect', {})
        
    def get(self, key, default=None):
        """Get configuration value with default"""
        return self.data.get(key, default)
        
    def __getitem__(self, key):
        """Allow dict-like access"""
        return self.data[key]
        
    def __contains__(self, key):
        """Allow 'in' operator"""
        return key in self.data
        
    def get_domain_policy(self, domain):
        """Get policy for a specific domain"""
        # Simple domain matching for OpenWrt
        for pattern, policy in self.domains.items():
            if domain.endswith(pattern) or pattern in domain:
                return policy
        return {}
        
    def should_proxy_domain(self, domain):
        """Check if domain should be proxied"""
        return any(pattern in domain for pattern in self.pac_domains)

def load_config(config_file):
    """Load configuration from JSON file"""
    try:
        with open(config_file, 'r') as f:
            return json.load(f)
    except Exception as e:
        logger.error(f"Failed to load config from {config_file}: {e}")
        raise
