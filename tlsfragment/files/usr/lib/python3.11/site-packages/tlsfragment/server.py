"""
TLS Fragment Server - Optimized for OpenWrt
"""

import socket
import threading
import time
import logging
import json
from pathlib import Path
from .proxy import ProxyHandler
from .config import Config

logger = logging.getLogger(__name__)

class TLSFragmentServer:
    def __init__(self, config_data):
        self.config = Config(config_data)
        self.host = "0.0.0.0"
        self.port = self.config.port
        self.sock = None
        self.running = False
        self.threads = []
        
    def start(self):
        """Start the proxy server"""
        try:
            self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            self.sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
            self.sock.bind((self.host, self.port))
            self.sock.listen(128)
            self.running = True
            
            logger.info(f"TLS Fragment Proxy listening on {self.host}:{self.port}")
            
            while self.running:
                try:
                    client_sock, client_addr = self.sock.accept()
                    logger.debug(f"New connection from {client_addr}")
                    
                    # Create handler thread
                    handler = ProxyHandler(client_sock, self.config)
                    thread = threading.Thread(target=handler.handle, daemon=True)
                    thread.start()
                    
                    # Clean up finished threads
                    self.threads = [t for t in self.threads if t.is_alive()]
                    self.threads.append(thread)
                    
                except socket.error as e:
                    if self.running:
                        logger.error(f"Socket error: {e}")
                        break
                        
        except Exception as e:
            logger.error(f"Server error: {e}")
        finally:
            self.stop()
            
    def stop(self):
        """Stop the proxy server"""
        self.running = False
        if self.sock:
            self.sock.close()
        
        # Wait for threads to finish
        for thread in self.threads:
            if thread.is_alive():
                thread.join(timeout=1)
                
        logger.info("TLS Fragment Proxy stopped")
