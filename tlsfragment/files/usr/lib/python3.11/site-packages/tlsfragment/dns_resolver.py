"""
DNS resolver for TLS Fragment - Optimized for OpenWrt
"""

import socket
import logging
import time
import json
from pathlib import Path

logger = logging.getLogger(__name__)

class DNSResolver:
    def __init__(self, config):
        self.config = config
        self.cache = {}
        self.cache_file = Path('/tmp/tlsfragment_dns_cache.json')
        self._load_cache()
        
    def resolve(self, hostname):
        """Resolve hostname to IP address"""
        try:
            # Check cache first
            if self.config.dns_cache and hostname in self.cache:
                entry = self.cache[hostname]
                if time.time() < entry['expires']:
                    logger.debug(f"DNS cache hit for {hostname}: {entry['ip']}")
                    return entry['ip']
                else:
                    del self.cache[hostname]
                    
            # Resolve using system DNS
            ip = socket.gethostbyname(hostname)
            
            # Cache result
            if self.config.dns_cache:
                self.cache[hostname] = {
                    'ip': ip,
                    'expires': time.time() + self.config.dns_cache_ttl
                }
                self._save_cache()
                
            logger.debug(f"DNS resolved {hostname} to {ip}")
            return ip
            
        except Exception as e:
            logger.error(f"DNS resolution failed for {hostname}: {e}")
            return None
            
    def _load_cache(self):
        """Load DNS cache from file"""
        try:
            if self.cache_file.exists():
                with open(self.cache_file, 'r') as f:
                    self.cache = json.load(f)
                    
                # Clean expired entries
                current_time = time.time()
                expired = [k for k, v in self.cache.items() 
                          if v['expires'] < current_time]
                for k in expired:
                    del self.cache[k]
                    
        except Exception as e:
            logger.debug(f"Failed to load DNS cache: {e}")
            self.cache = {}
            
    def _save_cache(self):
        """Save DNS cache to file"""
        try:
            import tempfile
            # Use atomic write to prevent corruption
            with tempfile.NamedTemporaryFile(mode='w', dir='/tmp', delete=False) as f:
                json.dump(self.cache, f)
                temp_path = f.name
        
            # Atomic move
            import os
            os.rename(temp_path, str(self.cache_file))
        except Exception as e:
            logger.debug(f"Failed to save DNS cache: {e}")
            # Clean up temp file if it exists
            try:
                if 'temp_path' in locals():
                    os.unlink(temp_path)
            except:
                pass
